{# Copyright (c) 2018 Nordic Semiconductor ASA #}
{# SPDX-License-Identifier: Apache-2.0         #}

{%- set params = {} -%} 

{%- macro set_param(param) -%}
	{%- do params.update(param) -%}
{%- endmacro -%}

{%- macro get_param(param) -%}
	{%- for key, value in params.items() -%}
		{%- if key == param -%}
			{{ value }}
			{%- break -%}
		{%- endif -%}
	{%- endfor -%}
{%- endmacro %}

{%- macro gen_device_name(device) -%}
	{%- set name = device['compatible']['0']|replace(',','_')|replace('-','_') -%}
	{%- set name = name + "_%x"|format(device['reg']['0']['address']['0']) -%}
	{{ name }}
{%- endmacro -%}

{%- macro gen_irq_connect(device) -%}
{% for irq in device['interrupts'] %}
	IRQ_CONNECT({{ device['interrupts'][irq]['irq'] }}, \
		    {{ device['interrupts'][irq]['priority'] }}, \
		    {{ get_param('irq_func') }}_{{ irq }}, \
		    DEVICE_GET({{ gen_device_name(device) }}, \
		    0);
	irq_enable({{ device['interrupts'][irq]['irq'] }});
{% endfor %}
{%- endmacro -%}

{# Input paramters 
	data               The data variable in the main template is not automatically carried over to this macro
	compatibles        Tell the macro which compatibels in the dts data to look for
	init_priority_flag Defaults to the value "CONFIG_KERNEL_INIT_PRIORITY_DEVICE" if omitted
	kernel_levels      Defaults to the value "POST_KERNEL" if omitted
	#}
{%- macro device(data, compatibles, init_priority_flag='CONFIG_KERNEL_INIT_PRIORITY_DEVICE', kernel_level='POST_KERNEL') -%}

{# Meta block just to fetch the parameters initialized in the meta template file #}
{%- block init_params scoped -%}
{%- endblock -%}

{# Will itterate through the compatibles list and look for device in dts data that
   has the same compatibles string #}
{%- for compa in compatibles -%}

{# Will copy the device reference in the compatibles lookup table in to a variable #}
{%- for device_ref in data['devicetree']['compatibles'][compa] -%}

{# Create a variable pointing to the devicetree metadata for the current intance #}
{%- set device = data['devicetree']['devices'][device_ref] %}

{# Create some helper variable for information used multiple times,
   can also  be used by overloaded blocks #}
{%- set device_name              = gen_device_name(device) -%}
{%- set config_struct_name       = device_name + "_config" -%}
{%- set data_struct_name         = device_name + "_data" -%}
{%- set irq_config_function_name = device_name + "_config_irq" -%} 
{%- set device_label             = device['label'] -%}

#ifdef CONFIG_{{ device_label }}
#ifdef {{ get_param('irq_flag') }}

DEVICE_DECLARE({{ device_name }});
static void {{ irq_config_function_name }}(struct device *dev)
{
{{ gen_irq_connect(device) }}
}

#endif

{% if get_param('config_struct') != "" -%}
static const struct {{ get_param('config_struct') }} {{ config_struct_name }} = {
{%- block config_struct_body scoped -%}
{%- endblock -%}
};
{%- endif %}

{% if get_param('data_struct') != "" -%}
static struct {{ get_param('data_struct') }} {{ data_struct_name }} = {
{%- block data_struct_body scoped -%}
{%- endblock -%}
};
{%- endif %}

DEVICE_AND_API_INIT({{ device_name }}, \
                    "{{ device_label }}", \
                    &{{ get_param('init_function') }}, \
                    {{'NULL' if get_param('data_struct') == '' else '&'+data_struct_name }}, \
                    {{'NULL' if get_param('config_struct') == '' else '&'+config_struct_name }}, \
                    {{ kernel_level }}, \
                    {{ init_priority_flag }}, \
                    &{{ get_param('api_struct') }});

#endif // CONFIG_{{ device_label }}
{%- endfor -%}

{%- endfor -%}

{% endmacro %}
